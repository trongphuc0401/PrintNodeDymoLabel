<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon"
    href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><path fill=%22%23667eea%22 d=%22M25,30h50v-15a5,5,0,0,0,-5,-5h-40a5,5,0,0,0,-5,5z%22/><path fill=%22%23764ba2%22 d=%22M20,40h60a5,5,0,0,1,5,5v25a5,5,0,0,1,-5,5h-60a5,5,0,0,1,-5,-5v-25a5,5,0,0,1,5,-5z%22/><rect x=%2225%22 y=%2255%22 width=%2250%22 height=%2235%22 rx=%225%22 fill=%22white%22/></svg>">
  <title>Shopify Print Dashboard</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      background-color: #f4f7f9;
      color: #333;
      line-height: 1.6;
      margin: 0;
    }

    .container {
      max-width: 1200px;
      margin: 20px auto;
      /* CƒÉn gi·ªØa container v√† th√™m kho·∫£ng c√°ch tr√™n d∆∞·ªõi */
      padding: 20px;
      background-color: #fff;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #e9ecef;
      padding-bottom: 20px;
      margin-bottom: 20px;
      flex-wrap: wrap;
      /* Cho ph√©p xu·ªëng d√≤ng tr√™n mobile */
      gap: 15px;
    }

    .header h1 {
      font-size: 24px;
      color: #2c3e50;
      position: relative;
      padding-left: 30px;
    }

    .header h1::before {
      content: 'üñ®Ô∏è';
      position: absolute;
      left: -10px;
      top: 50%;
      transform: translateY(-50%);
      font-size: 28px;
    }

    .config-info {
      background-color: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
      border: 1px solid #dee2e6;
    }

    .config-info p {
      margin: 5px 0;
      font-size: 14px;
      color: #495057;
    }

    .status-badge {
      display: inline-block;
      padding: 3px 8px;
      font-size: 12px;
      font-weight: 600;
      border-radius: 12px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .status-sent {
      background-color: #d1fae5;
      color: #065f46;
    }

    .status-failed {
      background-color: #fee2e2;
      color: #991b1b;
    }

    .status-pending {
      background-color: #fef3c7;
      color: #92400e;
    }

    .jobs-section {
      margin-top: 30px;
    }

    .jobs-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      flex-wrap: wrap;
      gap: 15px;
    }

    .jobs-header h2 {
      font-size: 20px;
      color: #2c3e50;
    }

    .button-group {
      display: flex;
      gap: 10px;
    }

    .refresh-btn,
    .test-btn,
    .status-btn,
    .retry-btn {
      padding: 8px 15px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 600;
      font-size: 14px;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .status-btn {
      background-color: #e0e7ff;
      color: #3730a3;
    }

    .status-btn:hover {
      background-color: #c7d2fe;
    }

    .test-btn {
      background-color: #d1fae5;
      color: #047857;
    }

    .test-btn:hover {
      background-color: #a7f3d0;
    }

    .retry-btn {
      background-color: #ffedd5;
      color: #9a3412;
    }

    .retry-btn:hover {
      background-color: #fed7aa;
    }

    .retry-btn:disabled {
      background-color: #e5e7eb;
      color: #9ca3af;
      cursor: not-allowed;
    }

    .jobs-table {
      width: 100%;
      border-collapse: collapse;
    }

    .jobs-table th,
    .jobs-table td {
      padding: 12px 15px;
      text-align: left;
      border-bottom: 1px solid #e9ecef;
    }

    .jobs-table th {
      background-color: #f8f9fa;
      font-size: 13px;
      text-transform: uppercase;
      color: #6c757d;
    }

    .no-jobs {
      text-align: center;
      padding: 40px;
      background-color: #f8f9fa;
      border-radius: 8px;
    }

    /* --- Responsive Styles --- */
    @media (max-width: 992px) {
      .header {
        flex-direction: column;
        align-items: flex-start;
      }
    }

    @media (max-width: 768px) {
      body {
        background-color: #fff;
        /* N·ªÅn tr·∫Øng cho mobile ƒë·ªÉ container h√≤a v√†o */
      }

      .container {
        margin: 0;
        padding: 15px;
        box-shadow: none;
        border-radius: 0;
      }

      .jobs-header {
        flex-direction: column;
        align-items: flex-start;
      }

      .button-group {
        width: 100%;
        display: grid;
        grid-template-columns: 1fr 1fr;
        /* Chia 2 c·ªôt cho c√°c n√∫t */
      }

      /* Bi·∫øn b·∫£ng th√†nh danh s√°ch card */
      .jobs-table thead {
        display: none;
      }

      .jobs-table,
      .jobs-table tbody,
      .jobs-table tr,
      .jobs-table td {
        display: block;
        width: 100%;
      }

      .jobs-table tr {
        margin-bottom: 15px;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 15px;
      }

      .jobs-table td {
        display: flex;
        justify-content: space-between;
        /* CƒÉn ch·ªânh label v√† value */
        align-items: center;
        text-align: right;
        padding: 10px 0;
        border-bottom: 1px solid #f1f3f5;
      }

      .jobs-table td:last-child {
        border-bottom: none;
      }

      .jobs-table td::before {
        content: attr(data-label);
        font-weight: 600;
        color: #495057;
        text-align: left;
        margin-right: 10px;
      }

      .jobs-table td[data-label="Actions"] {
        justify-content: center;
        /* CƒÉn gi·ªØa n√∫t In l·∫°i */
      }

      .jobs-table td[data-label="Actions"]::before {
        display: none;
        /* ·∫®n label "Actions" */
      }

      .retry-btn {
        width: 100%;
        justify-content: center;
        padding: 12px;
      }
    }
  </style>
</head>

<body>
  <div class="container">

    <!-- Header v√† Stats -->
    <div class="header">
      <h1>Shopify Print Dashboard</h1>
      <p style="color: #aaa; margin-top: 5px;">Real-time printing status from Shopify orders.</p>
    </div>

    <!-- C·∫•u h√¨nh -->
    <div class="config-info">
      <p><strong>üñ®Ô∏è Printer ID:</strong>
        <%= printerConfig.printerId %>
      </p>
      <p><strong>üîë API Status:</strong>
        <span class="status-badge <%= printerConfig.apiConfigured ? 'status-sent' : 'status-failed' %>">
          <%= printerConfig.apiConfigured ? 'Configured' : 'Not Configured' %>
        </span>
      </p>
      <p><strong>üì° Webhook URL:</strong> <code>/webhooks/shopify/order-payment</code></p>
      <p>API Key: <span class="status-badge <%= printerConfig.apiConfigured ? 'status-sent' : 'status-failed' %>">
          <%= printerConfig.apiConfigured ? 'Configured' : 'Not Configured' %>
        </span></p>
    </div>

    <!-- L·ªãch s·ª≠ Jobs -->
    <div class="jobs-section">
      <div class="jobs-header">
        <h2>Print Jobs History</h2>
        <div class="button-group">
          <button class="refresh-btn" onclick="refreshJobs()">üîÑ Refresh</button>
          <button class="test-btn" onclick="testPrint()">üß™ Test Print</button>
          <a href="/printnode-status" class="status-btn">üì° Status Page</a>
        </div>
      </div>

      <% if (printJobs.length===0) { %>
        <div class="empty-state">
          <div class="empty-state-icon">üì≠</div>
          <h3>Ch∆∞a c√≥ print job n√†o</h3>
          <p>Ch∆∞a c√≥ job n√†o ƒë∆∞·ª£c x·ª≠ l√Ω. H√£y t·∫°o m·ªôt ƒë∆°n h√†ng m·ªõi tr√™n Shopify.</p>
        </div>
        <% } else { %>
          <table class="jobs-table">
            <thead>
              <tr>
                <th>Time</th>
                <th>Order ID</th>
                <th>Product</th>
                <th>Job ID</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% printJobs.forEach(job=> { %>
                <tr>
                  <td data-label="Time">
                    <%= new Date(job.timestamp).toLocaleString('vi-VN') %>
                  </td>
                  <td data-label="Order ID"><strong>
                      <%= job.orderId %>
                    </strong></td>
                  <td data-label="Product">
                    <%= job.productName %>
                      <% if (job.variantTitle) { %>
                        <br><small style="color: #6c757d;">
                          <%= job.variantTitle %>
                        </small>
                        <% } %>
                  </td>
                  <td data-label="Job ID"><code>
                      <%= job.id || 'N/A' %>
                    </code></td>
                  <td data-label="Status">
                    <span class="status-badge status-<%= job.status %>">
                      <%= job.status %>
                    </span>
                    <% if (job.error) { %>
                      <br><small style="color: #dc3545;" title="<%= job.error %>">
                        <%= job.error.length> 40 ? job.error.substring(0, 40) + '...' : job.error %>
                      </small>
                      <% } %>
                  </td>
                  <td data-label="Actions">
                    <%# Ch·ªâ hi·ªÉn th·ªã n√∫t n·∫øu jobAttemptId t·ªìn t·∫°i %>
                      <% if (job.jobAttemptId) { %>
                        <button class="retry-btn" onclick="retryJob(event, '<%= job.jobAttemptId %>')"
                          title="In l·∫°i job n√†y">
                          üîÑ In l·∫°i
                        </button>
                        <% } %>
                  </td>
                </tr>
                <% }); %>
            </tbody>
          </table>
          <% } %>
    </div>

  </div>

  <script>
    // H√†m ƒë·ªÉ refresh l·∫°i danh s√°ch jobs
    function refreshJobs() {
      console.log('Refreshing jobs...');
      window.location.reload();
    }

    // H√†m ƒë·ªÉ g·ªçi API retry
    async function retryJob(event, jobAttemptId) { // ƒê·∫£m b·∫£o c√≥ 'event'
      const button = event.target;
      const originalText = button.innerHTML;
      button.disabled = true;
      button.innerHTML = 'ƒêang x·ª≠ l√Ω...';

      try {
        const response = await fetch(`/api/retry-job/${jobAttemptId}`, {
          method: 'POST',
        });

        // C·ªë g·∫Øng parse JSON, n·∫øu th·∫•t b·∫°i (v√¨ server tr·∫£ v·ªÅ HTML), s·∫Ω nh·∫£y v√†o catch
        const result = await response.json();

        if (!response.ok) {
          // N·∫øu server tr·∫£ v·ªÅ l·ªói (4xx, 5xx) nh∆∞ng v·∫´n l√† JSON
          throw new Error(result.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server.');
        }

        alert('Th√†nh c√¥ng! L·ªánh in l·∫°i ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒëi.');
        setTimeout(() => {
          window.location.reload();
        }, 1000);

      } catch (error) {
        // Catch n√†y s·∫Ω b·∫Øt c·∫£ l·ªói m·∫°ng, l·ªói parse JSON, v√† l·ªói logic ·ªü tr√™n
        console.error('Retry failed:', error);
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói c·ª• th·ªÉ h∆°n
        alert(`Th·∫•t b·∫°i: ${error.message}`);
        button.disabled = false;
        button.innerHTML = originalText;
      }
    }

    // H√†m ƒë·ªÉ g·ªçi API test print
    async function testPrint() {
      try {
        const response = await fetch('/api/test-print', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const result = await response.json();

        if (result.success) {
          alert('‚úÖ Test print sent successfully! Job ID: ' + result.jobId);
          setTimeout(() => location.reload(), 1000);
        } else {
          alert('‚ùå Test print failed: ' + result.error);
        }
      } catch (error) {
        alert('‚ùå Error: ' + error.message);
      }
    }

    // T·ª± ƒë·ªông refresh m·ªói 30 gi√¢y
    setInterval(refreshJobs, 30000);
  </script>
</body>

</html>