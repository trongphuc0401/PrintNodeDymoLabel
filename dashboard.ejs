<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Shopify Print Dashboard</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
    }

    .header {
      background: white;
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
      margin-bottom: 30px;
    }

    .header h1 {
      color: #333;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .header h1::before {
      content: 'üñ®Ô∏è';
      font-size: 1.2em;
    }

    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .stat-card {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .stat-card h3 {
      color: #666;
      font-size: 14px;
      margin-bottom: 10px;
      text-transform: uppercase;
    }

    .stat-card .value {
      font-size: 32px;
      font-weight: bold;
      color: #667eea;
    }

    .config-info {
      background: #f0f4ff;
      padding: 15px;
      border-radius: 8px;
      border-left: 4px solid #667eea;
      margin-top: 15px;
    }

    .config-info p {
      color: #555;
      margin: 5px 0;
      font-size: 14px;
    }

    .status-badge {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 600;
    }

    .status-sent {
      background: #d4edda;
      color: #155724;
    }

    .status-failed {
      background: #f8d7da;
      color: #721c24;
    }

    .jobs-section {
      background: white;
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }

    .jobs-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .jobs-header h2 {
      color: #333;
    }

    .refresh-btn,
    .test-btn {
      background: #667eea;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
      transition: all 0.3s;
    }

    .refresh-btn:hover,
    .test-btn:hover {
      background: #5568d3;
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .test-btn {
      background: #28a745;
      margin-left: 10px;
    }

    .test-btn:hover {
      background: #218838;
    }

    .jobs-table {
      width: 100%;
      border-collapse: collapse;
    }

    .jobs-table th {
      background: #f8f9fa;
      padding: 15px;
      text-align: left;
      font-weight: 600;
      color: #555;
      border-bottom: 2px solid #e9ecef;
    }

    .jobs-table td {
      padding: 15px;
      border-bottom: 1px solid #e9ecef;
      color: #333;
    }

    .jobs-table tr:hover {
      background: #f8f9fa;
    }

    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #999;
    }

    .empty-state-icon {
      font-size: 64px;
      margin-bottom: 20px;
    }

    .button-group {
      display: flex;
      gap: 10px;
    }

    .alert {
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
    }

    .alert-warning {
      background: #fff3cd;
      border-left: 4px solid #ffc107;
      color: #856404;
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="header">
      <h1>Shopify Print Dashboard</h1>
      <p style="color: #666; margin-top: 5px;">T·ª± ƒë·ªông in label cho ƒë∆°n h√†ng t·ª´ Shopify</p>

      <div class="config-info">
        <p><strong>üñ®Ô∏è Printer ID:</strong>
          <%= printerConfig.printerId %>
        </p>
        <p><strong>üîë API Status:</strong>
          <span class="status-badge <%= printerConfig.apiConfigured ? 'status-sent' : 'status-failed' %>">
            <%= printerConfig.apiConfigured ? 'Configured' : 'Not Configured' %>
          </span>
        </p>
        <p><strong>üì° Webhook URL:</strong> <code>/webhooks/shopify/order-payment</code></p>
      </div>
    </div>

    <% if (!printerConfig.apiConfigured) { %>
      <div class="alert alert-warning">
        ‚ö†Ô∏è <strong>Warning:</strong> PrintNode API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m PRINTNODE_API_KEY v√†o file .env
      </div>
      <% } %>

        <div class="stats">
          <div class="stat-card">
            <h3>Total Jobs</h3>
            <div class="value">
              <%= printJobs.length %>
            </div>
          </div>

          <div class="stat-card">
            <h3>Successful</h3>
            <div class="value" style="color: #28a745;">
              <%= printJobs.filter(j=> j.status === 'sent').length %>
            </div>
          </div>

          <div class="stat-card">
            <h3>Failed</h3>
            <div class="value" style="color: #dc3545;">
              <%= printJobs.filter(j=> j.status === 'failed').length %>
            </div>
          </div>
        </div>

        <div class="jobs-section">
          <div class="jobs-header">
            <h2>Print Jobs History</h2>
            <div class="button-group">
              <button class="test-btn" onclick="testPrint()">üß™ Test Print</button>
              <button class="refresh-btn" onclick="refreshJobs()">üîÑ Refresh</button>
            </div>
          </div>

          <% if (printJobs.length===0) { %>
            <div class="empty-state">
              <div class="empty-state-icon">üì≠</div>
              <h3>Ch∆∞a c√≥ print job n√†o</h3>
              <p>C√°c ƒë∆°n h√†ng t·ª´ Shopify s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y</p>
            </div>
            <% } else { %>
              <table class="jobs-table">
                <thead>
                  <tr>
                    <th>Time</th>
                    <th>Order ID</th>
                    <th>Product</th>
                    <th>Job ID</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody>
                  <% printJobs.forEach(job=> { %>
                    <tr>
                      <td>
                        <%= new Date(job.timestamp).toLocaleString('vi-VN') %>
                      </td>
                      <td><strong>#<%= job.orderId %></strong></td>
                      <td>
                        <%= job.productName %>
                      </td>
                      <td><code><%= job.id %></code></td>
                      <td>
                        <span class="status-badge status-<%= job.status %>">
                          <%= job.status %>
                        </span>
                        <% if (job.error) { %>
                          <br><small style="color: #dc3545;">
                            <%= job.error %>
                          </small>
                          <% } %>
                      </td>
                    </tr>
                    <% }); %>
                </tbody>
              </table>
              <% } %>
        </div>
  </div>

  <script>
    function refreshJobs() {
      location.reload();
    }

    async function testPrint() {
      try {
        const response = await fetch('/api/test-print', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const result = await response.json();

        if (result.success) {
          alert('‚úÖ Test print sent successfully! Job ID: ' + result.jobId);
          setTimeout(() => location.reload(), 1000);
        } else {
          alert('‚ùå Test print failed: ' + result.error);
        }
      } catch (error) {
        alert('‚ùå Error: ' + error.message);
      }
    }

    // Auto refresh every 30 seconds
    setInterval(() => {
      fetch('/api/jobs')
        .then(res => res.json())
        .then(jobs => {
          // Could update UI without full reload here
        });
    }, 30000);
  </script>
</body>

</html>